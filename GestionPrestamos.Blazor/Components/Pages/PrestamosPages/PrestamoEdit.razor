@page "/Prestamo/Edit/{PrestamoId:int}"

@inject PrestamosService prestamosService
@inject DeudoresService deudoresService
@inject ToastService toastService
@inject NavigationManager navigationManager

@*HTML*@
<PageTitle>Modificar</PageTitle>
<EditForm Model="Prestamo" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (showError)
    {
    <div class="alert alert-danger mt-3" role="alert">
        @MensajeError
    </div>
    }
    
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Modificar Prestamo</h5>
            </div>

            <div class="card-body">
                @*Deudor*@
                <div class="mb-3">
                    <label class="form-label"><strong>Deudor</strong></label>
                    <InputSelect class="form-control" @bind-Value="Prestamo.DeudorId">
                        <option value="" selected disabled>Elija una opci&oacute;n</option>
                        @foreach (var deudor in ListaDeudores)
                        {
                            <option value="@deudor.DeudorId">@deudor.Nombres</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="(() => Prestamo.Deudor)" />
                </div>
                @*Concepto*@
                <div class="mb-3">
                    <label class="form-label"><strong>Concepto</strong></label>
                    <InputText class="form-control" @bind-Value="Prestamo.Concepto"></InputText>
                    <ValidationMessage For="(() => Prestamo.Concepto)" />
                </div>
                @*Monto*@
                <div class="mb-3">
                    <label class="form-label"><strong>Monto</strong></label>
                    <InputNumber class="form-control" @bind-Value="Prestamo.Monto"></InputNumber>
                    <ValidationMessage For="(() => Prestamo.Monto)" />
                </div>
            </div>

            <Cuotas
                Valor="@Prestamo.Monto"
                CuotasExistentes="@cuotas"
                OnCuotasCalculated="HandleCuotasCalculated"
            />

            @*footer*@
            <div class="card-footer text-center mt-2">
                <a href="/Prestamo/Index" class="btn btn-secondary"> 
                    <span class="bi bi-arrow-left"></span> Volver
                </a>
                <button type="submit" class="btn btn-primary bi bi-floppy" @onclick="Modificar"> Modificar</button>
                <button type="button" class="btn btn-danger bi bi-trash" @onclick="Eliminar"> Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int PrestamoId { get; set; }

    public Prestamos Prestamo { get; set; } = new Prestamos();
    public string Mensaje { get; set; } = string.Empty;
    public List<Deudores> ListaDeudores { get; set; } = new List<Deudores>();
    public List<PrestamosDetalle> cuotas { get; set; } = new List<PrestamosDetalle>();
    private bool showError = false;
    private string MensajeError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Prestamo = await prestamosService.Buscar(PrestamoId);
        ListaDeudores = await deudoresService.Listar(d => d.DeudorId > 0);
        cuotas = await prestamosService.ObtenerCuotas(PrestamoId);
    }

    private async Task Modificar()
    {
        var creado = await prestamosService.Guardar(Prestamo);
        if (creado)
        {
                navigationManager.NavigateTo("Prestamo/Index");
        }
        else
        {
            MensajeError = "No se ha podido modificar el prestamo";
            showError = true;
        }
    }



    private async Task Eliminar(){
        var eliminado = await prestamosService.Eliminar(Prestamo.PrestamoId);

        if (eliminado)
        {
            navigationManager.NavigateTo("/Prestamo/Index");
        }
        else
        {
            MensajeError = "No se ha podido eliminar el prestamo";
            showError = true;
        }
    }
    
    private async Task HandleCuotasCalculated(List<PrestamosDetalle> detalles)
    {
        if (detalles == null || detalles.Count == 0)
            return;

        cuotas.Clear();
        Prestamo.PrestamosDetalle.Clear();
        cuotas.AddRange(detalles);
        Prestamo.PrestamosDetalle = cuotas.ToList();
        StateHasChanged();

        await Task.CompletedTask;
    }


}